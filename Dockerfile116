# An easy-to-use development docker image  
# ARG PYTORCH_TAG
# FROM pytorch/pytorch:${PYTORCH_TAG}
FROM nvidia/cuda:11.6.2-cudnn8-devel-ubuntu20.04

WORKDIR /root  

# print all build arg
ARG ADMIN_PASSWORD
ARG GOST_URL
ARG GOST_FILE
ARG GIT_USER_NAME
ARG GIT_USER_EMAIL
ARG USE_TUNA_MIRROR
ARG UBUNTU_VERSION

USER root  
ENV DEBIAN_FRONTEND=noninteractive
# Use Tsinghua TUNA mirror if specified  
RUN if [ "${USE_TUNA_MIRROR}" = "true" ]; then \  
    mv /etc/apt/sources.list /etc/apt/sources.list.bak && \  
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ ${UBUNTU_VERSION} main restricted universe multiverse" > /etc/apt/sources.list && \  
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ ${UBUNTU_VERSION}-updates main restricted universe multiverse" >> /etc/apt/sources.list && \  
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ ${UBUNTU_VERSION}-backports main restricted universe multiverse" >> /etc/apt/sources.list && \  
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ ${UBUNTU_VERSION}-security main restricted universe multiverse" >> /etc/apt/sources.list; \  
    fi  

RUN DEBIAN_FRONTEND=noninteractive apt-get update && yes | unminimize && \  
    apt-get install -y tldr vim htop tar zip net-tools man nvtop apt-utils git wget sudo rsync neovim nodejs iputils-ping curl mosh openssh-server locales zsh tmux && \  
    locale-gen ${LANG} && \  
    update-locale LANG=${LANG}  

RUN GOST_FILE=$(basename $GOST_URL .gz) && \  
    wget ${GOST_URL} && \  
    gunzip ${GOST_FILE}.gz && \  
    mv ${GOST_FILE} gost && \  
    chmod +x gost && \  
    cp gost /usr/local/bin/gost && \  
    mkdir -p /var/run/sshd && chmod -R 755 /var/run/sshd && \  
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config && \  
    adduser admin --gecos "First Last,RoomNumber,WorkPhone,HomePhone" --disabled-password && \  
    echo "admin:${ADMIN_PASSWORD}" | chpasswd && \  
    sed -i 's/%admin ALL=(ALL) ALL/%admin ALL=(ALL) NOPASSWD: ALL/g' /etc/sudoers && \  
    chsh -s $(which zsh) admin && \  
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config   

USER admin  

WORKDIR /home/admin  

RUN wget https://repo.anaconda.com/miniconda/Miniconda3-py310_23.5.2-0-Linux-x86_64.sh -O miniconda.sh && \  
    bash miniconda.sh -b -p /home/admin/miniconda && \  
    rm -f miniconda.sh && \  
    chown -R admin:admin /home/admin/miniconda && \  
    export PATH="/home/admin/miniconda/bin:$PATH" && \  
    conda init --all -v && \  
    if [ "${USE_TUNA_MIRROR}" = "true" ]; then \  
    echo "channels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud" > /home/admin/.condarc && \  
    pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple; \  
    fi
RUN export PATH="/home/admin/miniconda/bin:$PATH" && \  
    conda init --all -v && \ 
    pip install torch==1.13.1+cu116 torchvision==0.14.1+cu116 torchaudio==0.13.1 --extra-index-url https://download.pytorch.org/whl/cu116 && \  
    pip install jupyterlab tqdm autopep8 ipdb matplotlib transformers tokenizers accelerate gradio datasets bitsandbytes nvitop  

RUN sh -c "$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)" && \  
    git clone https://github.com/gpakosz/.tmux.git && \
    git clone https://github.com/wanhebin/clash-for-linux.git

RUN ln -s -f .tmux/.tmux.conf && \  
    cp .tmux/.tmux.conf.local . && \  
    mkdir -p /home/admin/.ssh && \    
    /home/admin/miniconda/bin/conda init --all -v 

RUN if [ -n "$GIT_USER_NAME" ] && [ -n "$GIT_USER_EMAIL" ]; then \
    git config --global user.name "$GIT_USER_NAME" && \
    git config --global user.email "$GIT_USER_EMAIL"; \
    fi

USER root  
ENTRYPOINT echo ${SSH_AUTHORIZED_KEYS} > /home/admin/.ssh/authorized_keys && chown -R admin:admin /home/admin/.ssh && chmod 600 /home/admin/.ssh/authorized_keys && service ssh start & /usr/local/bin/gost -L=rtcp://:${FORWARD_PORT}/:22 -F=socks5://${FORWARD_SERVER}  